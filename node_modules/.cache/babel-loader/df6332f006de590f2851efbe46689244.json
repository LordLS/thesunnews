{"ast":null,"code":"import axios from 'axios';\nimport { api } from '../helpers/api';\nconst authAxios = axios.create();\nauthAxios.interceptors.request.use(config => {\n  const newConfig = config;\n  const token = localStorage.getItem('token');\n  newConfig.headers = {\n    \"Authorization\": `Token ${token}`\n  };\n  return newConfig;\n});\n\nfunction signup(username, email, password1, password2) {\n  return axios.post(`${api.auth.signUp}`, {\n    \"username\": username,\n    \"email\": email,\n    \"password1\": password1,\n    \"password2\": password2\n  }).then(res => {\n    return res;\n  });\n}\n\nfunction login(email, password) {\n  return axios.post(`${api.auth.loginUrl}`, {\n    \"email\": email,\n    \"password\": password\n  }).then(res => {\n    localStorage.setItem(\"token\", res.data.key);\n    return res;\n  });\n}\n\nfunction isAuthenticated() {\n  const token = localStorage.getItem('token');\n  return token !== null && token !== undefined;\n}\n\nfunction logout() {\n  // authAxios.post(`${api.auth.logoutUrl}`)\n  const token = localStorage.getItem('token'); // Delete token so you get a new one when you log back in\n\n  axios.delete(`http://127.0.0.1:8000/token-delete/${token}`, {\n    headers: {\n      Authorization: `Token ${token}`\n    }\n  }).then(res => console.log(res)).catch(err => console.log(err));\n  localStorage.removeItem('token');\n}\n\nconst authenticationService = {\n  isAuthenticated: isAuthenticated(),\n  logout,\n  login,\n  signup\n};\nexport { authAxios, authenticationService };","map":{"version":3,"sources":["/Users/clintonm/Desktop/FS_PROJECT/TheSunNews/backend/thesunnews/frontend/thesunnews/src/services/authentication.service.js"],"names":["axios","api","authAxios","create","interceptors","request","use","config","newConfig","token","localStorage","getItem","headers","signup","username","email","password1","password2","post","auth","signUp","then","res","login","password","loginUrl","setItem","data","key","isAuthenticated","undefined","logout","delete","Authorization","console","log","catch","err","removeItem","authenticationService"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,QAAkB,gBAAlB;AAEA,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAN,EAAlB;AAEAD,SAAS,CAACE,YAAV,CAAuBC,OAAvB,CAA+BC,GAA/B,CAAmCC,MAAM,IAAI;AACzC,QAAMC,SAAS,GAAGD,MAAlB;AACA,QAAME,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACAH,EAAAA,SAAS,CAACI,OAAV,GAAoB;AAChB,qBAAkB,SAAQH,KAAM;AADhB,GAApB;AAGA,SAAOD,SAAP;AACH,CAPD;;AAWA,SAASK,MAAT,CAAgBC,QAAhB,EAA0BC,KAA1B,EAAgCC,SAAhC,EAA2CC,SAA3C,EAAsD;AAClD,SAAOjB,KAAK,CAACkB,IAAN,CAAY,GAAEjB,GAAG,CAACkB,IAAJ,CAASC,MAAO,EAA9B,EACH;AACI,gBAAYN,QADhB;AAEI,aAASC,KAFb;AAGI,iBAAaC,SAHjB;AAII,iBAAaC;AAJjB,GADG,EAQDI,IARC,CAQIC,GAAG,IAAI;AACV,WAAOA,GAAP;AACH,GAVE,CAAP;AAYH;;AAED,SAASC,KAAT,CAAeR,KAAf,EAAsBS,QAAtB,EAA+B;AAC3B,SAAOxB,KAAK,CAACkB,IAAN,CAAY,GAAEjB,GAAG,CAACkB,IAAJ,CAASM,QAAS,EAAhC,EACC;AACK,aAASV,KADd;AAEK,gBAAYS;AAFjB,GADD,EAKIH,IALJ,CAKSC,GAAG,IAAI;AACXZ,IAAAA,YAAY,CAACgB,OAAb,CAAqB,OAArB,EAA8BJ,GAAG,CAACK,IAAJ,CAASC,GAAvC;AACA,WAAON,GAAP;AACF,GARH,CAAP;AAUH;;AAGD,SAASO,eAAT,GAA2B;AACvB,QAAMpB,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,SAAOF,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKqB,SAAnC;AACH;;AAED,SAASC,MAAT,GAAkB;AACd;AACA,QAAMtB,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd,CAFc,CAGd;;AACAX,EAAAA,KAAK,CAACgC,MAAN,CAAc,sCAAqCvB,KAAM,EAAzD,EAA4D;AAACG,IAAAA,OAAO,EAAE;AAClEqB,MAAAA,aAAa,EAAG,SAAQxB,KAAM;AADoC;AAAV,GAA5D,EAEIY,IAFJ,CAESC,GAAG,IAAIY,OAAO,CAACC,GAAR,CAAYb,GAAZ,CAFhB,EAEkCc,KAFlC,CAEwCC,GAAG,IAAIH,OAAO,CAACC,GAAR,CAAYE,GAAZ,CAF/C;AAGA3B,EAAAA,YAAY,CAAC4B,UAAb,CAAwB,OAAxB;AACH;;AAED,MAAMC,qBAAqB,GAAG;AAC1BV,EAAAA,eAAe,EAACA,eAAe,EADL;AAE1BE,EAAAA,MAF0B;AAG1BR,EAAAA,KAH0B;AAI1BV,EAAAA;AAJ0B,CAA9B;AAQA,SAAQX,SAAR,EAAmBqC,qBAAnB","sourcesContent":["import axios from 'axios'\nimport {api} from '../helpers/api'\n\nconst authAxios = axios.create()\n\nauthAxios.interceptors.request.use(config => {\n    const newConfig = config\n    const token = localStorage.getItem('token')\n    newConfig.headers = {\n        \"Authorization\": `Token ${token}`\n    }\n    return newConfig\n})\n\n\n\nfunction signup(username, email,password1, password2) {\n    return axios.post(`${api.auth.signUp}`, \n        {\n            \"username\": username,\n            \"email\": email,\n            \"password1\": password1,\n            \"password2\": password2,\n\n        }\n        ).then(res => {\n            return res\n        }\n        ) \n}\n\nfunction login(email, password){\n    return axios.post(`${api.auth.loginUrl}`, \n            {\n                 \"email\": email,\n                 \"password\": password\n             }\n             ).then(res => {\n                localStorage.setItem(\"token\", res.data.key)\n                return res\n             }\n             )\n}\n\n\nfunction isAuthenticated() {\n    const token = localStorage.getItem('token')\n    return token !== null && token !== undefined\n}\n\nfunction logout() {\n    // authAxios.post(`${api.auth.logoutUrl}`)\n    const token = localStorage.getItem('token')\n    // Delete token so you get a new one when you log back in\n    axios.delete(`http://127.0.0.1:8000/token-delete/${token}`, {headers: {\n        Authorization: `Token ${token}`\n    }}).then(res => console.log(res)).catch(err => console.log(err));\n    localStorage.removeItem('token')\n}\n\nconst authenticationService = {\n    isAuthenticated:isAuthenticated(),\n    logout,\n    login,\n    signup,\n    \n}\n\nexport {authAxios, authenticationService}"]},"metadata":{},"sourceType":"module"}