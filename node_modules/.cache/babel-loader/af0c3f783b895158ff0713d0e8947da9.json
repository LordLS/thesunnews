{"ast":null,"code":"var _jsxFileName = \"/Users/clintonm/Desktop/FS_PROJECT/TheSunNews/frontend/thesunnews/src/containers/PubFeed.js\";\nimport 'antd/dist/antd.css';\nimport React, { useEffect, useState } from 'react';\nimport { Header, Message, Icon, Item, Divider } from 'semantic-ui-react';\nimport { authenticationService, authAxios } from '../services';\nimport { parseIsoTimetoString } from '../helpers/timeConverter';\nimport { Redirect, NavLink } from 'react-router-dom';\nimport { api } from '../helpers/api';\n\nconst PubFeed = () => {\n  const [publication, setPub] = useState();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n\n      try {\n        const res = await authAxios.get(`${api.pub.base}feed/`);\n        setPub(res.data.results);\n        setLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      }\n    }\n\n    if (authenticationService.isAuthenticated) {\n      fetchData();\n    }\n  }, []);\n\n  if (authenticationService.isAuthenticated === false) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    as: \"h1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \" Feed \"), /*#__PURE__*/React.createElement(Item.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, publication && publication.map(pub => /*#__PURE__*/React.createElement(\"div\", {\n    key: pub.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Item.Image, {\n    size: \"small\",\n    src: pub.thumbnail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Item.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(NavLink, {\n    to: `/${pub.section}/${pub.id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Item.Header, {\n    as: \"h1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 53\n    }\n  }, pub.title)), /*#__PURE__*/React.createElement(Item.Extra, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    name: \"time\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 25\n    }\n  }), \" : \", parseIsoTimetoString(pub.date_time_posted), \" | \", pub.section)), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  })))), error && /*#__PURE__*/React.createElement(Message, {\n    negative: true,\n    message: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }));\n};\n\nexport default PubFeed;","map":{"version":3,"sources":["/Users/clintonm/Desktop/FS_PROJECT/TheSunNews/frontend/thesunnews/src/containers/PubFeed.js"],"names":["React","useEffect","useState","Header","Message","Icon","Item","Divider","authenticationService","authAxios","parseIsoTimetoString","Redirect","NavLink","api","PubFeed","publication","setPub","loading","setLoading","error","setError","fetchData","res","get","pub","base","data","results","err","message","isAuthenticated","map","id","thumbnail","section","title","date_time_posted"],"mappings":"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","sourcesContent":["import 'antd/dist/antd.css'\nimport React, {useEffect, useState} from 'react'\nimport {Header, Message, Icon, Item, Divider} from 'semantic-ui-react'\nimport {authenticationService, authAxios} from '../services'\nimport {parseIsoTimetoString} from '../helpers/timeConverter'\nimport { Redirect, NavLink } from 'react-router-dom'\nimport {api} from '../helpers/api'\n\n\nconst PubFeed = () => {\n  const [publication, setPub] = useState()\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n      async function fetchData() {\n        setLoading(true);\n        try {\n            const res = await authAxios.get(`${api.pub.base}feed/`);\n            setPub(res.data.results);\n            setLoading(false)\n        } catch (err) {\n            setError(err.message)\n            setLoading(false)\n        } \n      }\n      if(authenticationService.isAuthenticated){\n        fetchData()\n      }\n    }, [])\n  \n  if (authenticationService.isAuthenticated === false){\n    return <Redirect to='/' />\n  }  \n  return(\n    \n    <div>\n      <Header as='h1'> Feed </Header>\n      <Item.Group>\n        {publication && (publication.map(pub => (\n          <div key={pub.id}>\n          <Item.Image size='small' src={pub.thumbnail} />\n          <Item.Content>\n          <NavLink to={`/${pub.section}/${pub.id}`}><Item.Header as='h1'>{pub.title}</Item.Header></NavLink>\n            <Item.Extra><Icon name='time'/> : {parseIsoTimetoString(pub.date_time_posted)} | {pub.section}</Item.Extra>\n          </Item.Content>\n          <Divider />\n          </div>\n        )))}\n\n      </Item.Group>\n      {error && <Message negative message={error}/>}\n     </div>\n  )\n}\nexport default PubFeed;"]},"metadata":{},"sourceType":"module"}