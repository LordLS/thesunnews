{"ast":null,"code":"var _jsxFileName = \"/Users/clintonm/Desktop/FS_PROJECT/TheSunNews/frontend/thesunnews/src/containers/PubFeed.js\";\nimport 'antd/dist/antd.css';\nimport React, { useEffect, useState } from 'react';\nimport { Header, Message } from 'semantic-ui-react';\nimport { authenticationService, authAxios } from '../services';\nimport { parseIsoTimetoString } from '../helpers/timeConverter';\nimport { Redirect, NavLink } from 'react-router-dom';\nimport { api } from '../helpers/api';\nimport ListPub from '../components/ListPub';\n\nconst PubFeed = () => {\n  const [publication, setPub] = useState();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n\n      try {\n        const res = await authAxios.get(`${api.pub.base}feed/`);\n\n        if (res.data.results.length !== 0) {\n          setPub(res.data.results);\n        }\n\n        setLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      }\n    }\n\n    if (authenticationService.isAuthenticated) {\n      fetchData();\n    }\n  }, []);\n\n  if (authenticationService.isAuthenticated === false) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    as: \"h1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, \" Feed \"), publication ? /*#__PURE__*/React.createElement(ListPub, {\n    publications: publication,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 22\n    }\n  }) : /*#__PURE__*/React.createElement(Message, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 62\n    }\n  }, \"Subscribe to a column to show their publicaitons on your feed \"), error && /*#__PURE__*/React.createElement(Message, {\n    negative: true,\n    message: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }));\n};\n\nexport default PubFeed;","map":{"version":3,"sources":["/Users/clintonm/Desktop/FS_PROJECT/TheSunNews/frontend/thesunnews/src/containers/PubFeed.js"],"names":["React","useEffect","useState","Header","Message","authenticationService","authAxios","parseIsoTimetoString","Redirect","NavLink","api","ListPub","PubFeed","publication","setPub","loading","setLoading","error","setError","fetchData","res","get","pub","base","data","results","length","err","message","isAuthenticated"],"mappings":";AAAA,OAAO,oBAAP;AACA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,MAAR,EAAgBC,OAAhB,QAA8B,mBAA9B;AACA,SAAQC,qBAAR,EAA+BC,SAA/B,QAA+C,aAA/C;AACA,SAAQC,oBAAR,QAAmC,0BAAnC;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,kBAAlC;AACA,SAAQC,GAAR,QAAkB,gBAAlB;AAEA,OAAOC,OAAP,MAAoB,uBAApB;;AAGA,MAAMC,OAAO,GAAG,MAAM;AACpB,QAAM,CAACC,WAAD,EAAcC,MAAd,IAAwBZ,QAAQ,EAAtC;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,IAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAekB,SAAf,GAA2B;AACzBH,MAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,UAAI;AACA,cAAMI,GAAG,GAAG,MAAMd,SAAS,CAACe,GAAV,CAAe,GAAEX,GAAG,CAACY,GAAJ,CAAQC,IAAK,OAA9B,CAAlB;;AACA,YAAIH,GAAG,CAACI,IAAJ,CAASC,OAAT,CAAiBC,MAAjB,KAA4B,CAAhC,EAAmC;AACjCZ,UAAAA,MAAM,CAACM,GAAG,CAACI,IAAJ,CAASC,OAAV,CAAN;AACD;;AACDT,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OAND,CAME,OAAOW,GAAP,EAAY;AACVT,QAAAA,QAAQ,CAACS,GAAG,CAACC,OAAL,CAAR;AACAZ,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACF;;AACD,QAAGX,qBAAqB,CAACwB,eAAzB,EAAyC;AACvCV,MAAAA,SAAS;AACV;AACF,GAjBM,EAiBJ,EAjBI,CAAT;;AAmBA,MAAId,qBAAqB,CAACwB,eAAtB,KAA0C,KAA9C,EAAoD;AAClD,wBAAO,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AACD,sBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,EAAE,EAAC,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGhB,WAAW,gBAAG,oBAAC,OAAD;AAAS,IAAA,YAAY,EAAEA,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,gBAA2C,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sEAFzD,EAIGI,KAAK,iBAAI,oBAAC,OAAD;AAAS,IAAA,QAAQ,MAAjB;AAAkB,IAAA,OAAO,EAAEA,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJZ,CAFF;AASD,CApCD;;AAqCA,eAAeL,OAAf","sourcesContent":["import 'antd/dist/antd.css'\nimport React, {useEffect, useState} from 'react'\nimport {Header, Message} from 'semantic-ui-react'\nimport {authenticationService, authAxios} from '../services'\nimport {parseIsoTimetoString} from '../helpers/timeConverter'\nimport { Redirect, NavLink } from 'react-router-dom'\nimport {api} from '../helpers/api'\n\nimport ListPub from '../components/ListPub'\n\n\nconst PubFeed = () => {\n  const [publication, setPub] = useState()\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n      async function fetchData() {\n        setLoading(true);\n        try {\n            const res = await authAxios.get(`${api.pub.base}feed/`);\n            if (res.data.results.length !== 0) {\n              setPub(res.data.results);\n            }\n            setLoading(false)\n        } catch (err) {\n            setError(err.message)\n            setLoading(false)\n        } \n      }\n      if(authenticationService.isAuthenticated){\n        fetchData()\n      }\n    }, [])\n  \n  if (authenticationService.isAuthenticated === false){\n    return <Redirect to='/' />\n  }  \n  return(\n    \n    <div>\n      <Header as='h1'> Feed </Header>\n      {publication ? <ListPub publications={publication}/> : <Message>Subscribe to a column to show their publicaitons on your feed </Message>}\n      \n      {error && <Message negative message={error}/>}\n     </div>\n  )\n}\nexport default PubFeed;"]},"metadata":{},"sourceType":"module"}